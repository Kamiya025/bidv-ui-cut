// Mixins.

//button
@mixin btn-styles {
  cursor: pointer;
  width: fit-content;
  background-color: $blue-primary;
  color: white;
  text-decoration: none;
  padding: 0.7rem 2.5rem;
  border-radius: 4px;
}

@mixin btn-default {
  @include btn-styles;
  @include btn-font-style;
  border: 1px solid $blue-primary;
}

@mixin btn-hover-white {
  @include btn-styles;
  @include btn-font-style;
  border: 1px solid $blue-primary;
  &:hover {
    background-color: white;
    color: $blue-primary;
    transition: background-color 0.15s linear;
  }
}

@mixin btn-red {
  @include btn-styles;
  @include btn-font-style;
  border: 1px solid $blue-primary;
}

@mixin btn-grey {
  @include btn-styles;
  @include btn-font-style;
  background-color: $grey-primary;
  border: 1px solid $grey-primary;
}


@mixin btn-product-nav {
  cursor: pointer;
  width: fit-content;
  background-color: white;
  color: #a2a2a2;
  text-decoration: none;

  font-family: Muli-Regular;
  font-size: 16px;
  line-height: 20px;
  font-weight: 900;
  @include breakpoint($bp-xsm) {
    font-size: 20px;
    line-height: 23px;
  }
}

@mixin a-default {
  cursor: pointer;
  color: #006B68;
  text-decoration: none;
}


// Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

// Helper function for working with Sass maps.
// Example: @include print($configuration);
@mixin print($declarations) {
  @each $property, $value in $declarations {
    #{$property}: $value;
  }
}
